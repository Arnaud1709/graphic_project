{"ast":null,"code":"var _jsxFileName = \"/home/arnaud.delcroix/graphic_project/src/graphic/graphic.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Area, ResponsiveContainer } from 'recharts';\nimport { selectCount } from './graphicSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Graph() {\n  _s();\n\n  const graph = useSelector(selectCount);\n  const dispatch = useDispatch();\n  const {\n    activeIndex,\n    data\n  } = this.state;\n  const activeItem = data[activeIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Click each rectangle \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 100,\n      children: /*#__PURE__*/_jsxDEV(BarChart, {\n        width: 500,\n        height: 400,\n        data: graph,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Area, {\n          type: \"monotone\",\n          dataKey: \"uv\",\n          stroke: \"#8884d8\",\n          fill: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"uv\",\n          children: data.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n            cursor: \"pointer\",\n            fill: index === activeIndex ? '#82ca9d' : '#8884d8'\n          }, `cell-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"content\",\n      children: `Uv of \"${activeItem.name}\": ${activeItem.uv}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 11\n  }, this);\n}\n\n_s(Graph, \"TWMe7cb9BGQ3FR2i8/J8mYyCO2w=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Graph;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["/home/arnaud.delcroix/graphic_project/src/graphic/graphic.js"],"names":["React","useState","useSelector","useDispatch","BarChart","Bar","Cell","XAxis","YAxis","CartesianGrid","Tooltip","Area","ResponsiveContainer","selectCount","Graph","graph","dispatch","activeIndex","data","state","activeItem","width","map","entry","index","name","uv"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,QAAT,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8BC,KAA9B,EAAqCC,KAArC,EAA4CC,aAA5C,EAA2DC,OAA3D,EAAoEC,IAApE,EAA0EC,mBAA1E,QAAqG,UAArG;AACA,SAASC,WAAT,QAA4B,gBAA5B;;AAEA,OAAO,SAASC,KAAT,GAAiB;AAAA;;AACtB,QAAMC,KAAK,GAAGb,WAAW,CAACW,WAAD,CAAzB;AACA,QAAMG,QAAQ,GAAGb,WAAW,EAA5B;AACM,QAAM;AAAEc,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAwB,KAAKC,KAAnC;AACA,QAAMC,UAAU,GAAGF,IAAI,CAACD,WAAD,CAAvB;AAEA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEI,MAAAA,KAAK,EAAE;AAAT,KAAZ;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,mBAAD;AAAqB,MAAA,KAAK,EAAC,MAA3B;AAAkC,MAAA,MAAM,EAAE,GAA1C;AAAA,6BACE,QAAC,QAAD;AAAU,QAAA,KAAK,EAAE,GAAjB;AAAsB,QAAA,MAAM,EAAE,GAA9B;AAAmC,QAAA,IAAI,EAAEN,KAAzC;AAAA,gCACA,QAAC,aAAD;AAAe,UAAA,eAAe,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,gBADA,eAEE,QAAC,KAAD;AAAO,UAAA,OAAO,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,gBAJF,eAKE,QAAC,IAAD;AAAM,UAAA,IAAI,EAAC,UAAX;AAAsB,UAAA,OAAO,EAAC,IAA9B;AAAmC,UAAA,MAAM,EAAC,SAA1C;AAAoD,UAAA,IAAI,EAAC;AAAzD;AAAA;AAAA;AAAA;AAAA,gBALF,eAME,QAAC,GAAD;AAAK,UAAA,OAAO,EAAC,IAAb;AAAA,oBACGG,IAAI,CAACI,GAAL,CAAS,CAACC,KAAD,EAAQC,KAAR,kBACR,QAAC,IAAD;AAAM,YAAA,MAAM,EAAC,SAAb;AAAuB,YAAA,IAAI,EAAEA,KAAK,KAAKP,WAAV,GAAwB,SAAxB,GAAoC;AAAjE,aAAkF,QAAOO,KAAM,EAA/F;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eAgBE;AAAG,MAAA,SAAS,EAAC,SAAb;AAAA,gBAAyB,UAASJ,UAAU,CAACK,IAAK,MAAKL,UAAU,CAACM,EAAG;AAArE;AAAA;AAAA;AAAA;AAAA,YAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBP;;GA1BeZ,K;UACAZ,W,EACGC,W;;;KAFHW,K;AA0Bf","sourcesContent":["import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Area, ResponsiveContainer } from 'recharts';\nimport { selectCount } from './graphicSlice';\n\nexport function Graph() {\n  const graph = useSelector(selectCount)\n  const dispatch = useDispatch();\n        const { activeIndex, data } = this.state;\n        const activeItem = data[activeIndex];\n    \n        return (\n          <div style={{ width: '100%' }}>\n            <p>Click each rectangle </p>\n            <ResponsiveContainer width=\"100%\" height={100}>\n              <BarChart width={500} height={400} data={graph}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip />\n                <Area type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n                <Bar dataKey=\"uv\">\n                  {data.map((entry, index) => (\n                    <Cell cursor=\"pointer\" fill={index === activeIndex ? '#82ca9d' : '#8884d8'} key={`cell-${index}`} />\n                  ))}\n                </Bar>\n              </BarChart>\n            </ResponsiveContainer>\n            <p className=\"content\">{`Uv of \"${activeItem.name}\": ${activeItem.uv}`}</p>\n          </div>\n        );\n};"]},"metadata":{},"sourceType":"module"}